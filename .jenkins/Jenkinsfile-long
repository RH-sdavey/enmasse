#!/usr/bin/env groovy

def lib = evaluate readTrusted('.jenkins/jenkins-functions.groovy')

pipeline {
    agent {
        node {
            label 'BodhiAgent'
        }
    }
    options {
        timeout(time: 20, unit: 'HOURS')
        ansiColor('xterm')
    }
    environment {
        CORES_DIR = "/tmp/cores"
        ARTIFACTS_DIR = 'artifacts'

        TAG = 'latest'
        JOB_NAME_SUB = "${String.format("%.15s", JOB_NAME)}"
        OPENSHIFT_PROJECT = "${JOB_NAME_SUB}${BUILD_NUMBER}"
    }
    stages {
        stage('wait for agent ready') {
            steps {
                script {
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        lib.startOpenshift()
                    }
                }
            }
        }
        stage('install enmasse') {
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.installEnmasse(env.TAG, false, false, true)
                    }
                }
            }
        }
        stage('system tests') {
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.runSystemtests(env.CORES_DIR, 'systemtests-marathon', 'marathon.**')
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                lib.postAction(env.CORES_DIR, env.ARTIFACTS_DIR)
            }
        }
        failure {
            script {
                lib.sendMail(env.MAILING_LIST, env.JOB_NAME, env.BUILD_URL)
            }
        }
    }
}
